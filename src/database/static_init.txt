"CREATE UNLOGGED TABLE clientes (\n"
    "    id SERIAL PRIMARY KEY,\n"
    "    nome VARCHAR(50) NOT NULL,\n"
    "    limite INTEGER NOT NULL\n"
    ");\n"
    
    "CREATE UNLOGGED TABLE transacoes (\n"
    "    id SERIAL PRIMARY KEY,\n"
    "    cliente_id INTEGER NOT NULL,\n"
    "    valor INTEGER NOT NULL,\n"
    "    tipo CHAR(1) NOT NULL,\n"
    "    descricao VARCHAR(10) NOT NULL,\n"
    "    realizada_em TIMESTAMP NOT NULL DEFAULT NOW(),\n"
    "    CONSTRAINT fk_clientes_transacoes_id\n"
    "        FOREIGN KEY (cliente_id) REFERENCES clientes(id)\n"
    ");\n"
    
    "CREATE UNLOGGED TABLE saldos (\n"
    "    id SERIAL PRIMARY KEY,\n"
    "    cliente_id INTEGER NOT NULL,\n"
       "valor INTEGER NOT NULL,\n"
    "CONSTRAINT fk_clientes_saldos_id\n"
    "    FOREIGN KEY (cliente_id) REFERENCES clientes(id)\n"
    ");\n"

    "DO $$\n"
    "BEGIN\n"
    "    INSERT INTO clientes (nome, limite)\n"
    "    VALUES\n"
    "        ('o barato sai caro', 1000 * 100),\n"
    "        ('zan corp ltda', 800 * 100),\n"
    "        ('les cruders', 10000 * 100),\n"
    "        ('padaria joia de cocaia', 100000 * 100),\n"
    "        ('kid mais', 5000 * 100);\n"
    
    "    INSERT INTO saldos (cliente_id, valor)\n"
    "    SELECT id, 0 FROM clientes;\n"
    "END;\n"
    "$$;\n"

    "CREATE OR REPLACE FUNCTION debitar(\n"
    "    cliente_id_tx INT,\n"
    "    valor_tx INT,\n"
    "    descricao_tx VARCHAR(10)\n"
    ")\n"
    "RETURNS TABLE (\n"
    "    novo_saldo INT,\n"
    "    possui_erro BOOL,\n"
    "    mensagem VARCHAR(20)\n"
    ")\n"
    "LANGUAGE plpgsql\n"
    "AS $$\n"
    "DECLARE\n"
    "    saldo_atual INT;\n"
    "    limite_atual INT;\n"
    "BEGIN\n"
    "    PERFORM pg_advisory_xact_lock(cliente_id_tx);\n"
    "    SELECT \n"
    "        c.limite,\n"
    "        COALESCE(s.valor, 0)\n"
    "    INTO\n"
    "        limite_atual,\n"
    "        saldo_atual\n"
    "    FROM clientes c\n"
    "        LEFT JOIN saldos s\n"
    "            ON c.id = s.cliente_id\n"
    "    WHERE c.id = cliente_id_tx;\n"

    "    IF saldo_atual - valor_tx >= limite_atual * -1 THEN\n"
    "        INSERT INTO transacoes\n"
    "            VALUES(DEFAULT, cliente_id_tx, valor_tx, 'd', descricao_tx, NOW());\n"
    
    "        UPDATE saldos\n"
    "        SET valor = valor - valor_tx\n"
    "        WHERE cliente_id = cliente_id_tx;\n"

    "        RETURN QUERY\n"
    "            SELECT\n"
    "                valor,\n"
    "                FALSE,\n"
    "                'ok'::VARCHAR(20)\n"
    "            FROM saldos\n"
    "            WHERE cliente_id = cliente_id_tx;\n"
    "    ELSE\n"
    "        RETURN QUERY\n"
    "            SELECT\n"
    "                valor,\n"
    "                TRUE,\n"
    "                'saldo insuficiente'::VARCHAR(20)\n"
    "            FROM saldos\n"
    "            WHERE cliente_id = cliente_id_tx;\n"
    "    END IF;\n"
    "END;\n"
    "$$;\n"

    "CREATE OR REPLACE FUNCTION creditar(\n"
    "    cliente_id_tx INT,\n"
    "    valor_tx INT,\n"
    "    descricao_tx VARCHAR(10)\n"
    ")\n"
    "RETURNS TABLE (\n"
    "    novo_saldo INT,\n"
    "    possui_erro BOOL,\n"
    "    mensagem VARCHAR(20)\n"
    ")\n"
    "LANGUAGE plpgsql\n"
    "AS $$\n"
    "BEGIN\n"
    "    PERFORM pg_advisory_xact_lock(cliente_id_tx);\n"
    
    "    INSERT INTO transacoes\n"
    "        VALUES(DEFAULT, cliente_id_tx, valor_tx, 'c', descricao_tx, NOW());\n"
    
    "    RETURN QUERY\n"
    "        UPDATE saldos\n"
    "        SET valor = valor + valor_tx\n"
    "        WHERE cliente_id = cliente_id_tx\n"
    "        RETURNING valor, FALSE, 'ok'::VARCHAR(20);\n"
    "END;\n"
    "$$;";